#!/bin/bash

SCENE_NAMES=(
  scene_intro
  scene_blood
  scene_spiders
  scene_graveyard
  scene_orca
  scene_fur
  scene_frankenphone
  scene_mirror
  scene_fire
  scene_exit
  scene_secret
)

SCENE_COMMENTS=(
  "Phone loads in / darkness"
  "Blood spray chamber"
  "Spider animatronic + webs"
  "Fog, gravestones, skeletons"
  "Orca-dino animatronic"
  "Fur wall + strobes"
  "Frankenphone lab sequence"
  "Mirror illusion / flashing"
  "Fire glow + heat FX"
  "Final room — EXIT or DIE"
  "Secret bonus scene"
)

HEADER_FILE="include/scenes.hpp"
SRC_DIR="src/scenes"
README_FILE="README_SCENES.md"

mkdir -p "$SRC_DIR"

echo "# Scene List" > "$README_FILE"
echo "" >> "$README_FILE"

for index in "${!SCENE_NAMES[@]}"; do
  funcname="${SCENE_NAMES[$index]}"
  comment="${SCENE_COMMENTS[$index]}"
  cppfile="$SRC_DIR/${funcname}.cpp"

  # Create .cpp stub
  if [ ! -f "$cppfile" ]; then
    cat > "$cppfile" <<EOF
#include "scenes.hpp"

// ${comment}
void ${funcname}() {
  // TODO: Implement ${funcname}
}
EOF
    echo "  ✓ Created: $cppfile"
  else
    echo "  ⏩ Skipped (exists): $cppfile"
  fi

  # Declare in scenes.hpp
  if ! grep -q "void $funcname();" "$HEADER_FILE"; then
    echo "void $funcname();" >> "$HEADER_FILE"
    echo "  + Declared: $funcname() in scenes.hpp"
  else
    echo "  ⏩ Already declared: $funcname()"
  fi

  # Update README
  printf "- \`%s\`: %s\n" "$funcname()" "$comment" >> "$README_FILE"
done

echo ""
echo "✅ All stubs generated, header updated, README refreshed."#!/bin/bash

SCENE_NAMES=(
  scene_intro
  scene_blood
  scene_spiders
  scene_graveyard
  scene_orca
  scene_fur
  scene_frankenphone
  scene_mirror
  scene_fire
  scene_exit
  scene_secret
)

HEADER_FILE="include/scenes.hpp"
SRC_DIR="src/scenes"

mkdir -p "$SRC_DIR"

for funcname in "${SCENE_NAMES[@]}"; do
  cppfile="$SRC_DIR/${funcname}.cpp"

  if [ ! -f "$cppfile" ]; then
    cat > "$cppfile" <<EOF
#include "scenes.hpp"

void $funcname() {
  // TODO: Implement $funcname
}
EOF
    echo "  ✓ Created: $cppfile"
  else
    echo "  ⏩ Skipped (exists): $cppfile"
  fi

  # Append to header if missing
  if ! grep -q "void $funcname();" "$HEADER_FILE"; then
    echo "void $funcname();" >> "$HEADER_FILE"
#!/bin/bash

SCENES=(
  intro
  blood
  spiders
  graveyard
  orca
  fur
  frankenphone
  mirror
  fire
  exit
  secret
)

SCENE_DIR="src/scenes"
HEADER_FILE="$SCENE_DIR/scenes.hpp"
COMMON_HEADER="$SCENE_DIR/scene_common.hpp"
MAPPING_CPP="src/mapping.cpp"
README="$SCENE_DIR/README.md"

mkdir -p "$SCENE_DIR"

# Ensure scene_common.hpp exists
if [[ ! -f "$COMMON_HEADER" ]]; then
  echo "using SceneFunction = void (*)();" > "$COMMON_HEADER"
  echo "✅ Created: $COMMON_HEADER"
fi

# Start fresh header
echo "#ifndef SCENES_HPP" > "$HEADER_FILE"
echo "#define SCENES_HPP" >> "$HEADER_FILE"
echo "" >> "$HEADER_FILE"
echo '#include "scene_common.hpp"' >> "$HEADER_FILE"
echo "" >> "$HEADER_FILE"

# Start fresh mapping.cpp
echo "#include \"mapping.hpp\"" > "$MAPPING_CPP"
for scene in "${SCENES[@]}"; do
  echo "#include \"scenes/scene_${scene}.hpp\"" >> "$MAPPING_CPP"
done
echo "" >> "$MAPPING_CPP"
echo "SceneFunction codeToScene(uint8_t code) {" >> "$MAPPING_CPP"
echo "  switch(code) {" >> "$MAPPING_CPP"

# Start README
echo "# Scene Stubs" > "$README"
echo "" >> "$README"
echo "Generated by generate_scene_stubs.sh" >> "$README"
echo "" >> "$README"

# Loop through all scenes
i=0
for name in "${SCENES[@]}"; do
  FUNC="scene_${name}"
  CPP="$SCENE_DIR/${FUNC}.cpp"
  HPP="$SCENE_DIR/${FUNC}.hpp"
  GUARD="SCENE_$(echo "$name" | tr a-z A-Z)_HPP"

  # Create .cpp only if missing
  if [[ ! -f "$CPP" ]]; then
    echo "void ${FUNC}() { /* TODO: implement */ }" > "$CPP"
    echo "✅ Created: $CPP"
  else
    echo "⏩ Skipped (exists): $CPP"
  fi

  # Always generate fresh .hpp
  cat > "$HPP" <<EOF
#ifndef $GUARD
#define $GUARD

void $FUNC();

#endif
EOF
  echo "✅ Wrote: $HPP"

  # Add to main header
  echo "void $FUNC();" >> "$HEADER_FILE"

  # Add to mapping
  printf "    case %2d: return %s;\n" "$i" "$FUNC" >> "$MAPPING_CPP"

  # Add to README
  echo "- \`$FUNC()\` → \`$FUNC.cpp/hpp\`" >> "$README"

  ((i++))
done

# Finish mapping.cpp
echo "    default: return scene_standby;" >> "$MAPPING_CPP"
echo "  }" >> "$MAPPING_CPP"
echo "}" >> "$MAPPING_CPP"

# Finish scenes.hpp
echo "" >> "$HEADER_FILE"
echo "#endif" >> "$HEADER_FILE"

echo ""
echo "✅ All .hpp files generated and scenes.hpp + mapping.cpp updated."
